// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: follow.proto

package follow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Follow_PostFollow_FullMethodName       = "/follow.Follow/PostFollow"
	Follow_GetFans_FullMethodName          = "/follow.Follow/GetFans"
	Follow_GetFollowingList_FullMethodName = "/follow.Follow/GetFollowingList"
	Follow_GetFriendList_FullMethodName    = "/follow.Follow/GetFriendList"
)

// FollowClient is the client API for Follow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowClient interface {
	PostFollow(ctx context.Context, in *PostFollowRequest, opts ...grpc.CallOption) (*Response, error)
	GetFans(ctx context.Context, in *GetFansRequest, opts ...grpc.CallOption) (*GetFansResponse, error)
	GetFollowingList(ctx context.Context, in *GetFollowingListRequest, opts ...grpc.CallOption) (*GetFollowingListResponse, error)
	GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error)
}

type followClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowClient(cc grpc.ClientConnInterface) FollowClient {
	return &followClient{cc}
}

func (c *followClient) PostFollow(ctx context.Context, in *PostFollowRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Follow_PostFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFans(ctx context.Context, in *GetFansRequest, opts ...grpc.CallOption) (*GetFansResponse, error) {
	out := new(GetFansResponse)
	err := c.cc.Invoke(ctx, Follow_GetFans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFollowingList(ctx context.Context, in *GetFollowingListRequest, opts ...grpc.CallOption) (*GetFollowingListResponse, error) {
	out := new(GetFollowingListResponse)
	err := c.cc.Invoke(ctx, Follow_GetFollowingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error) {
	out := new(GetFriendListResponse)
	err := c.cc.Invoke(ctx, Follow_GetFriendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowServer is the server API for Follow service.
// All implementations must embed UnimplementedFollowServer
// for forward compatibility
type FollowServer interface {
	PostFollow(context.Context, *PostFollowRequest) (*Response, error)
	GetFans(context.Context, *GetFansRequest) (*GetFansResponse, error)
	GetFollowingList(context.Context, *GetFollowingListRequest) (*GetFollowingListResponse, error)
	GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error)
	mustEmbedUnimplementedFollowServer()
}

// UnimplementedFollowServer must be embedded to have forward compatible implementations.
type UnimplementedFollowServer struct {
}

func (UnimplementedFollowServer) PostFollow(context.Context, *PostFollowRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostFollow not implemented")
}
func (UnimplementedFollowServer) GetFans(context.Context, *GetFansRequest) (*GetFansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFans not implemented")
}
func (UnimplementedFollowServer) GetFollowingList(context.Context, *GetFollowingListRequest) (*GetFollowingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowingList not implemented")
}
func (UnimplementedFollowServer) GetFriendList(context.Context, *GetFriendListRequest) (*GetFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedFollowServer) mustEmbedUnimplementedFollowServer() {}

// UnsafeFollowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowServer will
// result in compilation errors.
type UnsafeFollowServer interface {
	mustEmbedUnimplementedFollowServer()
}

func RegisterFollowServer(s grpc.ServiceRegistrar, srv FollowServer) {
	s.RegisterService(&Follow_ServiceDesc, srv)
}

func _Follow_PostFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).PostFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Follow_PostFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).PostFollow(ctx, req.(*PostFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Follow_GetFans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFans(ctx, req.(*GetFansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFollowingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFollowingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Follow_GetFollowingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFollowingList(ctx, req.(*GetFollowingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Follow_GetFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFriendList(ctx, req.(*GetFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Follow_ServiceDesc is the grpc.ServiceDesc for Follow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Follow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "follow.Follow",
	HandlerType: (*FollowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostFollow",
			Handler:    _Follow_PostFollow_Handler,
		},
		{
			MethodName: "GetFans",
			Handler:    _Follow_GetFans_Handler,
		},
		{
			MethodName: "GetFollowingList",
			Handler:    _Follow_GetFollowingList_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _Follow_GetFriendList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "follow.proto",
}
