service core-api {
	@handler UserRegister
	post /douyin/user/register (UserRegisterRequest) returns (UserRegisterResponse)
	
	@handler UserLogin
	post /douyin/user/login (UserLoginRequest) returns (UserLoginResponse)
	
	@handler UserInfo
	get /douyin/user (UserInfoRequest) returns (UserInfoResponse)
	
	@handler Feed
	get /douyin/feed (FeedRequest)returns (FeedResponse)
	
}

type FeedRequest {
	LatestTime uint   `form:"latest_time"`
	Token      string `form:"token,optional"`
	UserId     uint   `form:"user_id,optional"`
}

type VideoListRequest {
	UserId uint `json:"userId,optional"`
}

type FeedResponse {
	NextTime uint64 `json:"next_time"`
	BaseResponse
	VideoList []VideoListRes `json:"video_list"`
}

type VideoListResponse {
	BaseResponse
	VideoList []VideoListRes `json:"video_list"`
}

type VideoListRes {
	ID            int       `json:"id"`
	Author        AuthorRes `json:"author"`
	PlayURL       string    `json:"play_url"`
	CoverURL      string    `json:"cover_url"`
	IsFavorite    bool      `json:"is_favorite"`
	CommentCount  int       `json:"comment_count"`
	FavoriteCount int64     `json:"favorite_count"`
}

type AuthorRes {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type UserInfoRequest {
	Token string `form:"token"`
}

type UserInfoResponse {
	BaseResponse
	User UserInfo `json:"user"`
}

type UserInfo {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type UserLoginRequest {
	Username string `form:"username"`
	Password string `form:"password"`
}

type UserLoginResponse {
	UserId int    `json:"user_id"`
	Token  string `json:"token"`
	BaseResponse
}

type UserRegisterRequest {
	Username string `form:"username"`
	Password string `form:"password"`
}

type UserRegisterResponse {
	BaseResponse
	UserId int    `json:"user_id"`
	Token  string `json:"token"`
}

type BaseResponse {
	StatusCode int    `json:"status_code"`
	StatusMsg  string `json:"status_msg"`
}

@server (
	middleware :Auth
)
service core-api {
	@handler Publish
	post /douyin/publish/action (PublishRequest) returns (BaseResponse)
	
	@handler VideoList
	get /douyin/publish/list (VideoListRequest) returns (VideoListResponse)
	
	@handler Like
	post /douyin/favorite/action (LikeRequest) returns (BaseResponse)
	
	@handler GetLikeList
	get /douyin/favorite/list (GetLikeListRequest) returns (GetLikeListResponse)
	
	@handler GetComment
	get /douyin/comment/list (GetCommentRequest) returns (GetCommentResponse)
	
	@handler PostComment
	post /douyin/comment/action (PostCommentRequest) returns (PostCommentResponse)
	
	@handler PostFollow
	post /douyin/relation/action (PostFollowRequest) returns (BaseResponse)
	
	@handler GetFans
	get /douyin/relation/follower/list (GetFansRequest)returns(GetFansResponse)
	
	@handler GetFollowing
	get /douyin/relation/follow/list (GetFollowingRequest)returns(GetFollowingResponse)
	
	@handler PostMessage
	post /douyin/message/action (PostMessageRequest)returns(PostMessageResponse)
	
	@handler GetMessage
	get /douyin/message/chat (GetMessageRequest)returns(GetMessageResponse)
	
	@handler GetFriend
	get /douyin/relation/friend/list (GetFriendRequest)returns(GetFriendResponse)
	
}

type GetFriendRequest {
	Token  string `form:"token"`
	UserId uint   `form:"user_id,optional"`
}

type GetFriendResponse {
	StatusCode uint   `json:"status_code"`
	UserList   []User `json:"user_list"`
}

type GetMessageRequest {
	Token    string `form:"token"`
	ToUserId uint   `form:"to_user_id"`
	UserId   uint   `form:"user_id,optional"`
}

type GetMessageResponse {
	StatusCode  int       `json:"status_code"`
	MessageList []Message `json:"message_list"`
}

type Message {
	ID        int    `json:"id"`
	Content   string `json:"content"`
	CreatedAt string `json:"create_time"`
}

type PostMessageRequest {
	Token      string `form:"token"`
	ToUserId   uint   `form:"to_user_id"`
	ActionType uint   `form:"action_type"`
	Content    string `form:"content"`
	UserId     uint   `form:"user_id,optional"`
}

type PostMessageResponse {
	BaseResponse
}

type GetFollowingRequest {
	Token  string `form:"token"`
	UserId uint   `form:"user_id"`
}

type GetFollowingResponse {
	StatusCode uint   `json:"status_code"`
	UserList   []User `json:"user_list"`
}

type GetFansRequest {
	Token  string `form:"token"`
	UserId uint   `form:"user_id"`
}

type GetFansResponse {
	StatusCode uint   `json:"status_code"`
	UserList   []User `json:"user_list"`
}

type PostFollowRequest {
	Token      string `form:"token"`
	ToUserId   uint   `form:"to_user_id"`
	ActionType uint   `form:"action_type"`
	UserId     uint   `form:"user_id,optional"`
}

type PostCommentRequest {
	Token       string `form:"token"`
	ActionType  uint   `form:"action_type"`
	VideoId     uint   `form:"video_id"`
	CommentText string `form:"comment_text"`
	CommentId   uint   `form:"comment_id,optional"`
	UserName    string `form:"username,optional"`
	UserId      uint   `form:"user_id,optional"`
}

type PostCommentResponse {
	StatusCode uint    `json:"status_code"`
	Comment    Comment `json:"comment"`
}

type GetCommentRequest {
	Token   string `form:"token"`
	VideoId uint   `form:"video_id"`
}

type GetCommentResponse {
	StatusCode  uint      `json:"status_code"`
	CommentList []Comment `json:"comment_list"`
}

type Comment {
	Id        uint   `json:"id"`
	User      User   `json:"user"`
	Content   string `json:"content"`
	CreatedAt string `json:"create_date"`
}

type User {
	Id   uint   `json:"id"`
	Name string `json:"name"`
}

type GetLikeListResponse {
	BaseResponse
	VideoList []VideoListRes `json:"video_list"`
}

type GetLikeListRequest {
	UserId uint   `form:"user_id"`
	Token  string `form:"token"`
}

type LikeRequest {
	Token      string `form:"token"`
	VideoId    uint   `form:"video_id"`
	ActionType uint   `form:"action_type"`
	UserId     uint   `form:"user_id,optional"`
}

type PublishRequest {
	Token   string `form:"token"`
	Title   string `form:"title"`
	PlayURL string `form:"playUrl,optional"`
}

type PublishResponse {
	BaseResponse
}