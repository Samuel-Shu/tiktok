// Code generated by goctl. DO NOT EDIT.
// Source: message.proto

package messageclient

import (
	"context"

	"message/message"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetMessageRequest  = message.GetMessageRequest
	GetMessageResponse = message.GetMessageResponse
	MessageItem        = message.MessageItem
	PostMessageRequest = message.PostMessageRequest
	Response           = message.Response

	Message interface {
		PostMessage(ctx context.Context, in *PostMessageRequest, opts ...grpc.CallOption) (*Response, error)
		GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
	}

	defaultMessage struct {
		cli zrpc.Client
	}
)

func NewMessage(cli zrpc.Client) Message {
	return &defaultMessage{
		cli: cli,
	}
}

func (m *defaultMessage) PostMessage(ctx context.Context, in *PostMessageRequest, opts ...grpc.CallOption) (*Response, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.PostMessage(ctx, in, opts...)
}

func (m *defaultMessage) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.GetMessage(ctx, in, opts...)
}
